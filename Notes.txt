STEPS FOR CREATING NODE-API:
Step 1:
1. Create a node-api folder or anything and write npm init in terminal to initialise

Step 2:
2. You will get options to enter values on terminal, no need to put anything, Click enter till the end

Step 3:
3. In package.json file you wil find index.js file in main, that means you have to create index.js file.

Step 4:
4. After index.js file is created, in order to execute/run that file, in package.json file we need to mention in scripts part 
"start": "node index.js" and 
after that in terminal under that folder execute, npm run start and enter.
and you will the get output as below:
 
> api@1.0.0 start
> node index.js

Server started on port 3000

Step 5:
put codes 
const express = require('express');

const app = express(); // assigning this express module to app variable to carry on forward functions

app.use(express.json());

app.listen(3000, () =>{
    console.log('Server started on port 3000');
})
and install express and run you will server started on port 3000

5. In index.js file put these lines of code in that file:
const express = require('express');// module which imports all the features of the express module.

const app = express(); // assigning this express module to app variable to carry on forward functions

app.use(express.json()); // store the values in json format

// respond with "hello" when a GET request is made to the homepage
app.get('/', (req, res)=> {
    res.send('Hello');
})

app.get('/users', (req, res)=> {
    res.send('Hello from users');
})

app.get('/contacts', (req, res)=> {
    res.send('Hello from contacts');
})

app.listen(3000, () =>{
    console.log('Server started on port 3000');
})

Routing refers to determining how an application responds to a client request to a particular endpoint, 
which is a URI (or path) and a specific HTTP request method (GET, POST, and so on).

Routing refers to how an applicationâ€™s endpoints (URIs) respond to client requests. For an introduction to routing, 
see Basic routing.

You define routing using methods of the Express app object that correspond to HTTP methods; for example, app.get() 
to handle GET requests and app.post to handle POST requests. For a full list, see app.METHOD. You can also use app.all() 
to handle all HTTP methods and app.use() to specify middleware as the callback function (See Using middleware for details).

These codes above here are to execute on brwoser that is http://localhost:3000/ copy this link and paste on browser,
you will get respective outputs
when you give http://localhost:3000/
you will get output as: Hello

when you give http://localhost:3000/users
you will get output as: Hello from contacts

when you give http://localhost:3000/contacts
you will get output as: Hello from contacts

and then for these to execute npm run start, and to ctrl+c to stop sever

But here,if any changes done in between, you have stop the server and restart the server again
and again, to overcome this, you need to install nodemon, by in terminal npm install nodemon

Step 6:
What is Nodemon in Express js?
nodemon is a tool that helps develop Node. js based applications by automatically restarting the node application when file changes in the directory are detected.

6. install nodemon by npm install nodemon, and in package.json file check whether the package is installed
 "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.18.1",
    "mongoose": "^6.5.2",
    "nodemon": "^2.0.19" // nodemon installed
  }
you will get like this in dependencies of package.json file and after that
edit nodemon index.js
"scripts": {
    "start": "nodemon index.js",
in scripts tag and then npm run start on terminal to execute.
nodemon is for refreshed everytime you edit.

Step 7:
API:In other words, if you want to interact with a computer or system to retrieve information or perform a function, 
an API helps you communicate what you want to that system so it can understand and fulfill 
the request. 
You can think of an API as a mediator between the users or clients and the resources or 
web services they want to get.
7. Install thunder client in vscode extensions, you will have new request option in blue color, click on that, new page for
new request appears and in url dropdown select post and type your url
http://localhost:3000/quotes and select body type 

{
  "id": 1,
  "title": "My first quote"
}
and click send you will get in response below
{
  "message": "Quote added"
}
//for these to work put these codes in index.js

quotes=['This is a nice quote'];//initialise

app.post('/quotes', (req,res) => { 
    const quote = req.body;
    quotes.push(quote);
    res.send({ message: "Quote added"});
})//this is post method to post msg

app.get('/quotes', (req, res)=> {
    res.send(quotes);
})//get method to see if the msg we sent is correct or not must get back same msg


Step 8:
8. Now new request again, copy url http://localhost:3000/quotes and send, you will get back the quotes as what you have given as input at first,
you will get quotes as response

Step 9:
9. MongoDB:
Signup and you will get default page, create enter username, password, add ip address and create cluster.
Click on connect, create application click on it second option, and you will get Add your connection string into your application code tick mark that you will get big code.

Step 10:
10. Mongoose connects mongodb to nodejs. Install mongoose by npm install mongoose, after that npm start run nodejs and after mongoose install, create a connection.js file, untick the mark copy the small code copy paste in 
from mongodb atlas website, and paste it in connection.js file.

useNewUrlParser: true, useUnifiedTopology: true, copy from tick mark of the password from atlas passowrd and paste inside the bracket

Copy paste the code:
app.use(express.json()); // store the values in json format

require('./connection');

const Student = require('./models/Student');// import student schema 
and add require in index.js, you must get mongodb connection succeeded.
If not you might have error in ip address, click on network access click on edit on ip address, allow access on anywhere and restart the Server

Step 11:
11. Now create a folder called models, then create Student.js where is S capital, models is schema of what data we are going to store in database.
Here in schema of Student.js we didnt have id, because mongodb autogenerates id so no need worry about it, now go to index.js  


student.js fiul
and 
erase all the codes and let the below codes be there:

const express = require('express');// module which imports all the features of the express module.

const app = express(); // assigning this express module to app variable to carry on forward functions

app.use(express.json()); // store the values in json format

require('./connection');

app.listen(3000, () =>{
    console.log('Server started on port 3000');
})
//let the code be this much

And paste this code in between require and app.listen section:
//Get back data what was given as input
app.post("/student", async (req, res) =>{
    try{
        const student = new Student(req.body);
        const createStudent= await student.save();
        res.status(201).send(createStudent); // this will save mongodb atlas, status successful
    } catch(e){
        res.status(400).send(e); // here you might get error
    }
    
}) 
Put this code and check collections in Mongodb atlas website, you will get test student database displayed.

Now go to thunderclient, select new request, copypaste http://localhost:3000/student , select POST option from dropdown, Click on body and
type:
{
 "name":"Shyam",
 "usn":"4SF18CS148",
 "branch":"CS",
 "phone":"6362406283",
 "sem":"8",
 "email":"shyamng48@gmail.com"
}
and click on send, you will get back same data which was entered and refresh mongodb website you will get the same the data displayed hwich you entered through thunderclient.

Step 12:
12. Now to get all the student data which was entered.
Put this code in index.js file

app.get("/student", async (req, res) =>{
    try{
        const students= await student.find();
        res.send(students); // this will save mongodb atlas, status successful
    } catch(e){
        res.status(400).send(e); // here you might get error
    }
    
})

Now click onnew request, copypaste this link http://localhost:3000/student and select GET condition from dropdown, send and you will get the data

You can alter the request to add new data from same new request, no need new request, send and get you will get response as:

Response
[
  {
    "_id": "63007e2bbb873b4906560f74",
    "name": "Shyam",
    "usn": "4SF18CS148",
    "branch": "CS",
    "sem": "8",
    "email": "shyamng48@gmail.com",
    "phone": "6362406283",
    "__v": 0
  },
  {
    "_id": "6300871091d6c7a1af725147",
    "name": "Sujith",
    "usn": "4SF18CS160",
    "branch": "CS",
    "sem": "8",
    "email": "sujith@gmail.com",
    "phone": "6362406283",
    "__v": 0
  }
]

you have got two data entered and have two diff id's, now to get one of thier data id, put
this display function and copy the id of anyone data and follow below steps
//display
app.get("/student/:id", async (req, res) =>{
    try{
        const _id=req.params.id;
        const student = await Student.findById(_id);
        if(!student){
            return res.status(404).send();
        }
        else{
            res.send(student);
        }
    } catch(e){
        console.log(e);
        res.status(400).send(e); // here you might get error
    }
    
})// get all student data whatever that is stored in database

copy id 6300871091d6c7a1af725147, new request, copy localhost link and http://localhost:3000/student/6300871091d6c7a1af725147 and send you will get the data of that id

If you have any error, put console.log in catch section and the error will be displayed and correct it

Update:
//update
app.put("/student/:id", async (req, res) =>{
    try{
        const _id =req.params.id;
        const student = await Student.findByIdAndUpdate(_id, req.body, {
            new:true,
        });
        res.send(student);
    } catch(e){
        console.log(e);
        res.status(400).send(e); // here you might get error
    }
    
})// get all student data whatever that is stored in database

new request, put link of localhost, put id in link
http://localhost:3000/student/63007e2bbb873b4906560f74 and 

{
  "email":"sujith343434@gmail.com"
}
put request and send, you will get
{
  "_id": "63007e2bbb873b4906560f74",
  "name": "Shyam",
  "usn": "4SF18CS148",
  "branch": "CS",
  "sem": "8",
  "email": "sujith343434@gmail.com",
  "phone": "6362406283",
  "__v": 0
}

Delete:

//delete
app.delete("/student/:id", async (req, res) =>{
    try{
        const _id =req.params.id;
        const student = await Student.findByIdAndDelete(_id);
        if(!student){
            return res.status(404).send();
        }
        else{
            res.send(student);
        }
    } catch(e){
        console.log(e);
        res.status(400).send(e); // here you might get error
    }
    
})// get all student data whatever that is stored in database

New request and http://localhost:3000/student/63007e2bbb873b4906560f74 choose delete from dropdown and deleted

{
  "_id": "63007e2bbb873b4906560f74",
  "name": "Shyam",
  "usn": "4SF18CS148",
  "branch": "CS",
  "sem": "8",
  "email": "sujith343434@gmail.com",
  "phone": "6362406283",
  "__v": 0
} and check in mongodb atlas website and refresh it if deleted

Frontend:
1. Create form and studentslists.js file, rfce add them in navbar links
<Link to="/list">All students</Link>
<Link to="/create">Add new student</Link>

now add style in navbar.css 
.navbar{
    float:right;
}

a{
    margin-right:10px;
}

and also in app.js 
remove other links and paste these two
<Route path="/" element={<Form />} />
<Route path="/list" element={<StudentsList/>} />

Copy paste style.css and form.js codes sent you and paste and run
add import also

const [name, setName] =useState("");
  const [usn, setUsn] =useState("");
  const [branch, setBranch] =useState("");
  const [email, setEmail] =useState("");
  const [sem, setSem] =useState("");
  const [phone, setPhone] =useState("");

  const handleSubmit = (e)=>{
    e.preventDefault();
  
  const data={
    name:name,
    usn:usn,
    branch:branch,
    email:email,
    sem:sem,
    phone:phone,
  };
  console.log(data);
};

in form.js file

give inputs in form click submit and console inspect element you will get data displayed in console when 
you submit

npm install axios